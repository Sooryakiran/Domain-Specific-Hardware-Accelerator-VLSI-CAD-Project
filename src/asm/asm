#!/usr/bin/env python3

import sys
import struct
import argparse

"""
Definintions 

"""

WORD_LENGTH = 32
OUT = "out"
ops =  ["NOP",
        "ASG_8",   
        "ASG_16",
        "ASG_32", 
        "MOV",

        "ADD_I8",
        "ADD_I16",
        "ADD_I32",
        "ADD_F32",

        "SUB_I8",
        "SUB_I16",
        "SUB_I32",
        "SUB_F32",

        "IS_EQ",
        
        "JMP", 
        "JMPIF",

        "LOAD_8",
        "LOAD_16",
        "LOAD_32",

        "STORE_8",
        "STORE_16",
        "STORE_32",

        "VEC_NEG_I8",
        "VEC_NEG_I16",
        "VEC_NEG_I32",
        "VEC_NEG_F32",
        "VEC_MIN_I8",
        "VEC_MIN_I16",
        "VEC_MIN_I32",
        "VEC_MIN_F32"]

regs = ["R0", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "NO"]


def fill(code):
    """
    Zero padding the MSB

    @param   code : bits without padding
    @returns padded bits

    """
    return code + "0"*(WORD_LENGTH - len(code))


def int_to_bin(x, n):
    """
    Convert integer to its binary representation in 2's compliment
    
    @param x : (int) Input integer
    @param n : (int) Bit width
    @returns binary representation

    """
    return '{0:{fill}{width}b}'.format((x + 2**n) % 2**n, fill='0', width=n)


def op_to_bin(opcode):
    """
    Returns the binary representation of an Opcode (5 bits)

    """
    return int_to_bin(ops.index(opcode), 5)


def reg_to_bin(reg):
    """
    Returns the binary representation of a Regname (4 bits)

    """
    return int_to_bin(regs.index(reg), 4)


def float_to_f32(num):
    """
    Returns the binary representation of a number in float32

    """
    return bin(struct.unpack('!i',struct.pack('!f',num))[0])


def opnop():
    """
    Machine code for NOP

    """
    return traditional("NOP", "NO", "NO", "NO", "NO")

def asg8(line):
    """
    Machine code for ASG_8

    """
    tokens = line.split()
    op     = op_to_bin(tokens[0])
    reg    = reg_to_bin(tokens[1])
    if (WORD_LENGTH >= 64):
        value  = int_to_bin(int(tokens[2]), 32)
    else:
        value  = int_to_bin(int(tokens[2]), 16)
    return fill(op + reg + value)


def asg16(line):
    """
    Machine code for ASG_16
    """
    return asg8(line)


def asg32(line):
    """
    Machine code for ASG_32

    """
    tokens = line.split()
    op     = op_to_bin(tokens[0])
    reg    = reg_to_bin(tokens[1])
    number = tokens[2]

    if "." in number:
        value = float(number)
        value = float_to_f32(value).split("0b")
        other = value[0]
        value = value[1]

        while(len(value) != 32):
            value = "0" + value

        if other == '-':
            out = []
            for i in range(len(value)):
                if value[i] == '0' :
                    out.append('1')
                else:
                    out.append('0')
            value = ''.join(out)
    else:
        value = int_to_bin(int(number), 32)

    if WORD_LENGTH >= 64:
        return [fill(op+reg+value)]

    else:
        return [fill(op + reg), fill(value)]


def traditional(op, src1, src2, aux, dst):
    """
    Returns the machine code for compute ops

    """
    return fill(op_to_bin(op) +\
                reg_to_bin(src1) +\
                reg_to_bin(src2) +\
                reg_to_bin(aux) +\
                reg_to_bin(dst))



def mov(line):
    """
    Returns the machine code for MOV

    """
    tokens = line.split()
    return traditional(tokens[0], tokens[1], "NO", "NO", tokens[2])


def addsub(line):
    """
    Returns the machine code for ADD_IX and SUB_IX ops

    """
    tokens = line.split()
    return traditional(tokens[0], tokens[1], tokens[2], "NO", tokens[3])


def iseq(line):
    """
    Returns the machine code for IS_EQ

    """
    tokens = line.split()
    return traditional(tokens[0], tokens[1], tokens[2], "NO", tokens[3])


def jmp(line):
    """
    Returns the machine code for JMP

    """
    tokens = line.split()
    return traditional(tokens[0], tokens[1], "NO", "NO", "NO")


def jmpif(line):
    """
    Returns the machine code for JMP_IF

    """
    tokens = line.split()
    return traditional(tokens[0], tokens[1], tokens[2], "NO", "NO")


def load(line):
    """
    Returns the machine code for LOAD_X

    """
    tokens = line.split()
    return traditional(tokens[0], tokens[1], "NO", "NO", tokens[2])


def store(line):
    """
    Returns the machine code for STORE_X

    """
    tokens = line.split()
    return traditional(tokens[0], tokens[1], tokens[2], "NO", "NO")


def vecneg(line):
    """
    Returns the machine code for VEC_NEG_X

    """
    tokens = line.split()
    return traditional(tokens[0], tokens[1], tokens[2], tokens[3], "NO")

def vecmin(line):
    """
    Returns the machine code for VEC_MIN_X

    """
    tokens = line.split()
    return traditional(tokens[0], tokens[1], tokens[2], tokens[3], tokens[4])


def main(file_name):
    """
    Parse the input file line by line and produce the corresponding machine leanguage.
    Note: Single pass only, so labels must be defined before they are used.

    @param file_name : (string) input path of the assembly file
    """

    outs         = []
    current_line = 0
    labels       = {}
    with open(file_name) as f:
        lines = f.readlines()
        i     = 0
        for line in lines:
            i+=1
            try:
                if True:
                    if ":" in line:
                        parts         = line.split(":")
                        label         = parts[0]
                        labels[label] = current_line
                        line          = parts[1]

                    tokens = line.split()
                    op     = tokens[0]

                    if "$" in line:
                        part_1 = line.split()
                        for part in part_1:
                            if "$" in part:
                                replace = str(labels[part.split("$")[1]])
                                line    = line.replace(part, replace)
                                
                    if op   == "NOP":
                        outs.append(opnop())
                    elif op == "ASG_8":
                        outs.append(asg8(line))
                    elif op == "ASG_16":
                        outs.append(asg16(line))
                    elif op == "ASG_32":
                        temp_outs = asg32(line)
                        for temp_out in temp_outs:
                            outs.append(temp_out)
                    elif op == "MOV":
                        outs.append(mov(line))
                    elif op == "ADD_I8" or op == "ADD_I16" or op == "ADD_I32" or op == "ADD_F32" :
                        outs.append(addsub(line))
                    elif op == "SUB_I8" or op == "SUB_I16" or op == "SUB_I32" or op == "SUB_F32":
                        outs.append(addsub(line))
                    elif op == "IS_EQ":
                        outs.append(iseq(line))
                    elif op == "JMP":
                        outs.append(jmp(line))
                    elif op == "JMPIF":
                        outs.append(jmpif(line))
                    elif op == "LOAD_8" or op == "LOAD_16" or op == "LOAD_32":
                        outs.append(load(line))
                    elif op == "STORE_8" or op == "STORE_16" or op == "STORE_32":
                        outs.append(store(line))
                    elif op == "VEC_NEG_I8" or op == "VEC_NEG_I16" or op == "VEC_NEG_I32" or op == "VEC_NEG_F32":
                        outs.append(vecneg(line))
                    elif op == "VEC_MIN_I8" or op == "VEC_MIN_I16" or op == "VEC_MIN_I32" or op == "VEC_MIN_F32":
                        outs.append(vecmin(line))
                    else:
                        raise(ValueError)
                    
                    if op == "ASG_32" and WORD_LENGTH < 64:
                        current_line += 2
                    else:
                        current_line += 1
            except:      
                print("[ERROR] Error on line", i, ":", line)
                exit()

    fp = open(OUT, 'w')
    for item in outs:
        string = hex(int(str(item), 2))[2:]
        fp.write(string)
        fp.write('\n')
    fp.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Assembler for our awesome processor.")
    parser.add_argument('input_file', type = str, help = "Input .asm file.")
    parser.add_argument('-w', type = int, help = "Word width of the processor.", default = WORD_LENGTH)
    parser.add_argument('-o', type = str, help = "Output machine code file.", default = OUT)

    args        = parser.parse_args()
    WORD_LENGTH = args.w
    OUT         = args.o

    main(args.input_file)
    exit(1)
    