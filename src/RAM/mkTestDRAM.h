/*
 * Generated by Bluespec Compiler (build 2c1ed34)
 * 
 * On Mon Dec 14 18:02:57 IST 2020
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkTestDRAM_h__
#define __mkTestDRAM_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkTestDRAM module */
class MOD_mkTestDRAM : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_abort;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_0_address_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_0_address_written;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_0_control_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_0_control_written;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_0_data_in_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_0_data_in_written;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_0_data_out_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_0_data_out_written;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_0_read_req_signal;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_0_write_req_signal;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_1_address_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_1_address_written;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_1_control_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_1_control_written;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_1_data_in_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_1_data_in_written;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_1_data_out_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_1_data_out_written;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_1_read_req_signal;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_1_write_req_signal;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_2_address_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_2_address_written;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_2_control_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_2_control_written;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_2_data_in_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_2_data_in_written;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_2_data_out_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_2_data_out_written;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_2_read_req_signal;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_2_write_req_signal;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_3_address_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_3_address_written;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_3_control_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_3_control_written;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_3_data_in_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_3_data_in_written;
  MOD_Reg<tUInt8> INST_my_ram_inst_csr_s_3_data_out_inner_reg;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_3_data_out_written;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_3_read_req_signal;
  MOD_Wire<tUInt8> INST_my_ram_inst_csr_s_3_write_req_signal;
  MOD_CReg<tUInt8> INST_my_ram_inst_data;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_1;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_10;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_11;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_12;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_13;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_14;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_15;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_16;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_17;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_18;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_19;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_2;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_20;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_21;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_22;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_23;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_24;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_25;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_26;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_27;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_28;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_29;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_3;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_30;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_31;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_32;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_33;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_34;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_35;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_36;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_37;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_38;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_39;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_4;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_40;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_41;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_42;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_43;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_44;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_45;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_46;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_47;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_48;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_49;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_5;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_50;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_51;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_52;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_53;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_54;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_55;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_56;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_57;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_58;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_59;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_6;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_60;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_61;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_62;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_63;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_7;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_8;
  MOD_CReg<tUInt8> INST_my_ram_inst_data_9;
  MOD_Reg<tUInt8> INST_my_ram_inst_dummy;
  MOD_Reg<tUInt8> INST_running;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
 
 /* Constructor */
 public:
  MOD_mkTestDRAM(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE___me_check_22;
  tUInt8 DEF_CAN_FIRE___me_check_22;
  tUInt8 DEF_WILL_FIRE___me_check_21;
  tUInt8 DEF_CAN_FIRE___me_check_21;
  tUInt8 DEF_WILL_FIRE___me_check_20;
  tUInt8 DEF_CAN_FIRE___me_check_20;
  tUInt8 DEF_WILL_FIRE___me_check_19;
  tUInt8 DEF_CAN_FIRE___me_check_19;
  tUInt8 DEF_WILL_FIRE___me_check_18;
  tUInt8 DEF_CAN_FIRE___me_check_18;
  tUInt8 DEF_WILL_FIRE___me_check_17;
  tUInt8 DEF_CAN_FIRE___me_check_17;
  tUInt8 DEF_WILL_FIRE___me_check_16;
  tUInt8 DEF_CAN_FIRE___me_check_16;
  tUInt8 DEF_WILL_FIRE___me_check_15;
  tUInt8 DEF_CAN_FIRE___me_check_15;
  tUInt8 DEF_WILL_FIRE___me_check_14;
  tUInt8 DEF_CAN_FIRE___me_check_14;
  tUInt8 DEF_WILL_FIRE___me_check_13;
  tUInt8 DEF_CAN_FIRE___me_check_13;
  tUInt8 DEF_WILL_FIRE_RL_auto_finish;
  tUInt8 DEF_CAN_FIRE_RL_auto_finish;
  tUInt8 DEF_WILL_FIRE_RL_auto_start;
  tUInt8 DEF_CAN_FIRE_RL_auto_start;
  tUInt8 DEF_WILL_FIRE_RL_fsm_start;
  tUInt8 DEF_CAN_FIRE_RL_fsm_start;
  tUInt8 DEF_WILL_FIRE_RL_idle_l165c22;
  tUInt8 DEF_CAN_FIRE_RL_idle_l165c22;
  tUInt8 DEF_WILL_FIRE_RL_action_l188c13;
  tUInt8 DEF_CAN_FIRE_RL_action_l188c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l182c13;
  tUInt8 DEF_CAN_FIRE_RL_action_l182c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l181c13;
  tUInt8 DEF_CAN_FIRE_RL_action_l181c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l180c19;
  tUInt8 DEF_CAN_FIRE_RL_action_l180c19;
  tUInt8 DEF_WILL_FIRE_RL_action_l179c19;
  tUInt8 DEF_CAN_FIRE_RL_action_l179c19;
  tUInt8 DEF_WILL_FIRE_RL_action_l178c19;
  tUInt8 DEF_CAN_FIRE_RL_action_l178c19;
  tUInt8 DEF_WILL_FIRE_RL_action_l172c13;
  tUInt8 DEF_CAN_FIRE_RL_action_l172c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l171c13;
  tUInt8 DEF_CAN_FIRE_RL_action_l171c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l170c19;
  tUInt8 DEF_CAN_FIRE_RL_action_l170c19;
  tUInt8 DEF_WILL_FIRE_RL_action_l169c19;
  tUInt8 DEF_CAN_FIRE_RL_action_l169c19;
  tUInt8 DEF_WILL_FIRE_RL_action_l167c19;
  tUInt8 DEF_CAN_FIRE_RL_action_l167c19;
  tUInt8 DEF_WILL_FIRE_RL_restart;
  tUInt8 DEF_CAN_FIRE_RL_restart;
  tUInt8 DEF_WILL_FIRE_RL_state_every;
  tUInt8 DEF_CAN_FIRE_RL_state_every;
  tUInt8 DEF_WILL_FIRE_RL_state_fired__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_state_fired__dreg_update;
  tUInt8 DEF_WILL_FIRE_RL_state_handle_abort;
  tUInt8 DEF_CAN_FIRE_RL_state_handle_abort;
  tUInt8 DEF_WILL_FIRE_RL_start_reg__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_start_reg__dreg_update;
  tUInt8 DEF_WILL_FIRE_RL_my_ram_inst_port_i_rule_3;
  tUInt8 DEF_CAN_FIRE_RL_my_ram_inst_port_i_rule_3;
  tUInt8 DEF_WILL_FIRE_RL_my_ram_inst_port_i_rule_2;
  tUInt8 DEF_CAN_FIRE_RL_my_ram_inst_port_i_rule_2;
  tUInt8 DEF_WILL_FIRE_RL_my_ram_inst_port_i_rule_1;
  tUInt8 DEF_CAN_FIRE_RL_my_ram_inst_port_i_rule_1;
  tUInt8 DEF_WILL_FIRE_RL_my_ram_inst_port_i_rule;
  tUInt8 DEF_CAN_FIRE_RL_my_ram_inst_port_i_rule;
  tUInt8 DEF_WILL_FIRE_RL_my_ram_inst_csr_s_3_master_rule;
  tUInt8 DEF_CAN_FIRE_RL_my_ram_inst_csr_s_3_master_rule;
  tUInt8 DEF_WILL_FIRE_RL_my_ram_inst_csr_s_2_master_rule;
  tUInt8 DEF_CAN_FIRE_RL_my_ram_inst_csr_s_2_master_rule;
  tUInt8 DEF_WILL_FIRE_RL_my_ram_inst_csr_s_1_master_rule;
  tUInt8 DEF_CAN_FIRE_RL_my_ram_inst_csr_s_1_master_rule;
  tUInt8 DEF_WILL_FIRE_RL_my_ram_inst_csr_s_0_master_rule;
  tUInt8 DEF_CAN_FIRE_RL_my_ram_inst_csr_s_0_master_rule;
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
  void RL_my_ram_inst_csr_s_0_master_rule();
  void RL_my_ram_inst_csr_s_1_master_rule();
  void RL_my_ram_inst_csr_s_2_master_rule();
  void RL_my_ram_inst_csr_s_3_master_rule();
  void RL_my_ram_inst_port_i_rule();
  void RL_my_ram_inst_port_i_rule_1();
  void RL_my_ram_inst_port_i_rule_2();
  void RL_my_ram_inst_port_i_rule_3();
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_restart();
  void RL_action_l167c19();
  void RL_action_l169c19();
  void RL_action_l170c19();
  void RL_action_l171c13();
  void RL_action_l172c13();
  void RL_action_l178c19();
  void RL_action_l179c19();
  void RL_action_l180c19();
  void RL_action_l181c13();
  void RL_action_l182c13();
  void RL_action_l188c13();
  void RL_idle_l165c22();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void __me_check_13();
  void __me_check_14();
  void __me_check_15();
  void __me_check_16();
  void __me_check_17();
  void __me_check_18();
  void __me_check_19();
  void __me_check_20();
  void __me_check_21();
  void __me_check_22();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestDRAM &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTestDRAM &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTestDRAM &backing);
};

#endif /* ifndef __mkTestDRAM_h__ */
